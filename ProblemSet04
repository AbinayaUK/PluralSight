1)Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. 
Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.


class Shape:
    area=0
    def __init__(self):
         self.length=length
        
class Square(Shape):
    def __init__(self,length):
        self.length = length

    def area(self):
        a = (self.length * self.length)
        print('The area of a square with a side length of %f is %f' % (self.length, a))


s = Square(2)
s.area()

2. Define a class Person and its two child classes: Male and Female.
#All classes have a method "getGender" which can print "Male" for Male class and "Female" for Female class.


class Person:
    def getGender(self):
        print("Gender is ",end='')


class Male(Person):
    def __init__(self, gender):
        self.gender = gender

    def getGender(self):
        super().getGender()
        print("Male")


class Female(Person):
    def __init__(self, gender):
        self.gender = gender

    def getGender(self):
        super().getGender()
        print("Female")


gender = input("Enter Gender 'f'/'F'/'m'/'M'")
if gender == 'F' or gender == 'f':
    female = Female(gender)
    female.getGender()
else:
    male = Male(gender)
    male.getGender()


3.Design and implement a Money class that stores monetary values in dollars and cents. 
Special method init should have the following function header, def init(self, dollars, cents) Include special method repr (str) for displaying values in dollars and cents: $ 0.45, $ 1.00, $ 1.25. 
Also include special method add, and three getter methods that each provide the monetary value in another currency. Choose any three currencies to convert to.
 class money:
    def __init__(self,dollar,cent):
        self.dollar=dollar
        self.cent=cent
    def repr(self):
        if int(self.cent)<=99:
            money=(self.dollar,self.cent)
            self.value=float(".".join(money))
            print("the currency is:",self.value)
        else:
            cen=float(self.cent)/100
            self.value=float(self.dollar)+cen
            print("the currency is:",self.value)
        self.add()
        print("money in rupees:",self.rs)
        print("money in euros:",self.euro)
        print("money in yen:",self.riyal)

    def add(self):
        self.rs=self.value*72.42
        self.euro=self.value*0.87
        self.riyal=self.value*3.75


dol=input("enter the dollar value")
cent=input("enter the cent value")
obj=money(dol,cent)
obj.repr()


4.Write both a nonrecursive and recursive function that displays the rows of asterisks given below,
#            **
#	        ****
#          ******
#        **********
#       ************
#      **************



def pattern(n):
    j=2
    for i in range(n,0,-1):
        print(i*" ",j*"*")
        j+=2
pattern(7)

j=2
def pattern(n):
    global j
    print(n*" ",j*"*")
    if j<14:
        j+=2
        pattern(n-1)
pattern(7)



6.
 class temperature:
    def __init__(self, temperature):
        pass
    def str(self):
        pass
    def abovefreezing(self):
        pass
    def contofahren(self):
        pass
    def contocelsius(self):
        pass
    def contokelvin(self):
        pass
class fahrenheit(temperature):
    def __init__(self, temperature):
        self.temp = temperature
    def str(self):
        return self.temp
    def abovefreezing(self):
        if self.temp>32:
            return "true"
        else:
            return "false"
    def contofahren(self):
        return self.temp
    def contocel(self):
        cel = self.temp / 33.85
        return cel
    def contokel(self):
        kel = self.temp * 255.9
        return kel
class celsius(temperature):
    def __init__(self, temperature):
        self.temp = temperature
    def str(self):
        return self.temp

    def abovefreezing(self):
        if self.temp>0:
            return "true"
        else:
            return "false"
    def contofahren(self):
        fah = self.temp * 33.8
        return fah
    def contocel(self):
        return self.temp
    def contokel(self):
        kel = self.temp * 274.15
class kelvin(temperature):
    def __init__(self, temperature):
        self.temp = temperature
    def str(self):
        return self.temp
    def abovefreezing(self):
        if self.temp >= 273:
            return "true"
        else:
            return "false"
    def contofahren(self):
        a = 9 / 5.0
        return (self.temp * a) - 459.67
    def contocel(self):
        cel = self.temp - 273.15
        return cel
    def contokel(self):
        return self.temp
temp=int(input("enter the temperature"))
obj=fahrenheit(temp)
obj1=celsius(temp)
obj2=kelvin(temp)
print(obj.str())
print(obj1.str())
print(obj2.str())
print("is farenhiet above freezing ", obj.abovefreezing())
print("is celcius above freezing ", obj1.abovefreezing())
print("is kelvin above freezing ", obj2.abovefreezing())
print("fahrenheit", obj.contofahren())
print("farenheit in celsius ", obj.contocel())
print("farenheit in kelvin ", obj.contokel())
print("celsius", obj1.contocel)
print("celsius in farenheit", obj1.contofahren())
print("celcius in kelvin ", obj1.contokel())
print("kelvin", obj2.contokel())
print("kelvin in farenheit ", obj2.contofahren())
print("kelvin in celcius", obj2.contocel())
